name: Rename Markdown Files and Folders in-place

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  process-markdown:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITBOOKKEY }}
        fetch-depth: 0

    - name: Set UTF-8 Encoding
      run: |
        export LC_CTYPE="UTF-8"
       
    - name: Rename Folders and Files Based on README H1 In-place
      shell: bash
      run: |
        set -euxo pipefail  # 디버깅을 위한 셸 옵션 설정

        # 모든 README.md 파일의 경로와 헤딩을 미리 수집
        mapfile -t readme_files < <(find developLog -type f -name 'README.md')

        declare -A dir_mappings  # 원본 디렉토리와 새로운 디렉토리의 매핑을 저장

        # 디렉토리 이름 변경을 위한 정보 수집
        for file in "${readme_files[@]}"; do
          echo "Processing $file"

          # README.md 파일에서 첫 번째 h1 헤딩 추출
          heading=$(grep -m 1 '^# ' "$file" | sed 's/^# //')

          # 헤딩이 없는 경우 건너뜁니다
          if [[ -z "$heading" ]]; then
            echo "헤딩을 찾을 수 없습니다: $file"
            continue
          fi

          # 헤딩 정제 (파일명에 적합하도록)
          heading=$(echo "$heading" | tr -cd '[:alnum:] _-')

          # README.md 파일이 있는 디렉토리 경로
          dir=$(dirname "$file")
          parent_dir=$(dirname "$dir")

          # 새로운 디렉토리 이름 생성
          new_dir="$parent_dir/$heading"

          # 디렉토리 매핑 저장
          dir_mappings["$dir"]="$new_dir"
        done

        # 디렉토리 이름 변경 (깊이 순으로 정렬하여 하위 디렉토리부터 변경)
        for dir in "${!dir_mappings[@]}"; do
          new_dir="${dir_mappings[$dir]}"
          echo "Renaming $dir to $new_dir"

          # 디렉토리가 이미 존재하면 건너뜁니다
          if [[ -d "$new_dir" ]]; then
            echo "디렉토리가 이미 존재합니다: $new_dir. 건너뜁니다."
            continue
          fi

          mv "$dir" "$new_dir"
        done

        # 모든 마크다운 파일의 경로 수집
        mapfile -t markdown_files < <(find developLog -type f -name '*.md' ! -name 'README.md')

        # 파일 이름 변경
        for file in "${markdown_files[@]}"; do
          echo "Processing $file"

          # 첫 번째 h1 헤딩을 추출하여 제목으로 사용
          title=$(grep -m 1 '^#' "$file" | sed 's/^# //')

          if [[ -n "$title" ]]; then
            # 제목 정제 (파일명에 적합하도록)
            title=$(echo "$title" | tr -cd '[:alnum:] _-')

            dir=$(dirname "$file")
            ext="${file##*.}"

            new_file="$dir/$title.$ext"

            # 동일한 이름의 파일이 이미 존재하면 건너뜁니다
            if [[ "$file" != "$new_file" && ! -e "$new_file" ]]; then
              echo "Renaming $file to $new_file"
              mv "$file" "$new_file"
            else
              echo "파일 이름을 변경할 수 없습니다: $file. 건너뜁니다."
            fi
          else
            echo "유효한 제목을 찾을 수 없습니다: $file. 건너뜁니다."
          fi
        done

        # 변경된 파일과 디렉토리 확인
        echo "변경된 developLog 디렉토리의 내용:"
        find developLog -type f

    - name: Commit changes
      shell: bash
      run: |
        set -euxo pipefail  # 디버깅을 위한 셸 옵션 설정

        # Git 사용자 설정 (이미 설정되어 있다면 생략 가능)
        git config user.name 'GoldenPearls'
        git config user.email 'prettylee620@naver.com'

        # 변경된 파일 추가
        git add developLog

        # 커밋 작성
        git commit -m "Rename folders and markdown files based on h1 titles"

        # 원격 저장소에 푸시
        git push origin HEAD:main --force
